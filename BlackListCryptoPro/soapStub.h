/* soapStub.h
   Generated by gSOAP 2.8.17r from wsdl.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#define SOAP_NAMESPACE_OF_ns1	"http://vigruzki.rkn.gov.ru/OperatorRequest/"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20817
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (7)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 7; } /* = unique type id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() { xsd__base64Binary::soap_default(NULL); }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getLastDumpDate
#define SOAP_TYPE__ns1__getLastDumpDate (12)
/* ns1:getLastDumpDate */
class SOAP_CMAC _ns1__getLastDumpDate
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique type id SOAP_TYPE__ns1__getLastDumpDate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getLastDumpDate() { _ns1__getLastDumpDate::soap_default(NULL); }
	virtual ~_ns1__getLastDumpDate() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getLastDumpDateResponse
#define SOAP_TYPE__ns1__getLastDumpDateResponse (13)
/* ns1:getLastDumpDateResponse */
class SOAP_CMAC _ns1__getLastDumpDateResponse
{
public:
	LONG64 lastDumpDate;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique type id SOAP_TYPE__ns1__getLastDumpDateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getLastDumpDateResponse() { _ns1__getLastDumpDateResponse::soap_default(NULL); }
	virtual ~_ns1__getLastDumpDateResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__sendRequest
#define SOAP_TYPE__ns1__sendRequest (14)
/* ns1:sendRequest */
class SOAP_CMAC _ns1__sendRequest
{
public:
	xsd__base64Binary requestFile;	/* required element of type xsd:base64Binary */
	xsd__base64Binary signatureFile;	/* required element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique type id SOAP_TYPE__ns1__sendRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__sendRequest() { _ns1__sendRequest::soap_default(NULL); }
	virtual ~_ns1__sendRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns1__sendRequestResponse
#define SOAP_TYPE__ns1__sendRequestResponse (15)
/* ns1:sendRequestResponse */
class SOAP_CMAC _ns1__sendRequestResponse
{
public:
	bool result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	char *resultComment;	/* optional element of type xsd:string */
	char *code;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique type id SOAP_TYPE__ns1__sendRequestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__sendRequestResponse() { _ns1__sendRequestResponse::soap_default(NULL); }
	virtual ~_ns1__sendRequestResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getResult
#define SOAP_TYPE__ns1__getResult (16)
/* ns1:getResult */
class SOAP_CMAC _ns1__getResult
{
public:
	char *code;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique type id SOAP_TYPE__ns1__getResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getResult() { _ns1__getResult::soap_default(NULL); }
	virtual ~_ns1__getResult() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getResultResponse
#define SOAP_TYPE__ns1__getResultResponse (17)
/* ns1:getResultResponse */
class SOAP_CMAC _ns1__getResultResponse
{
public:
	bool result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	char *resultComment;	/* optional element of type xsd:string */
	xsd__base64Binary *registerZipArchive;	/* optional element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique type id SOAP_TYPE__ns1__getResultResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getResultResponse() { _ns1__getResultResponse::soap_default(NULL); }
	virtual ~_ns1__getResultResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns1__getLastDumpDate
#define SOAP_TYPE___ns1__getLastDumpDate (24)
/* Operation wrapper: */
struct __ns1__getLastDumpDate
{
public:
	_ns1__getLastDumpDate *ns1__getLastDumpDate;	/* optional element of type ns1:getLastDumpDate */
public:
	int soap_type() const { return 24; } /* = unique type id SOAP_TYPE___ns1__getLastDumpDate */
};
#endif

#ifndef SOAP_TYPE___ns1__sendRequest
#define SOAP_TYPE___ns1__sendRequest (28)
/* Operation wrapper: */
struct __ns1__sendRequest
{
public:
	_ns1__sendRequest *ns1__sendRequest;	/* optional element of type ns1:sendRequest */
public:
	int soap_type() const { return 28; } /* = unique type id SOAP_TYPE___ns1__sendRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getResult
#define SOAP_TYPE___ns1__getResult (32)
/* Operation wrapper: */
struct __ns1__getResult
{
public:
	_ns1__getResult *ns1__getResult;	/* optional element of type ns1:getResult */
public:
	int soap_type() const { return 32; } /* = unique type id SOAP_TYPE___ns1__getResult */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (33)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 33; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (34)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 34; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (36)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 36; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (39)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 39; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (40)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 40; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getLastDumpDate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getLastDumpDate *ns1__getLastDumpDate, _ns1__getLastDumpDateResponse *ns1__getLastDumpDateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__sendRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__sendRequest *ns1__sendRequest, _ns1__sendRequestResponse *ns1__sendRequestResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getResult(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getResult *ns1__getResult, _ns1__getResultResponse *ns1__getResultResponse);

#endif

/* End of soapStub.h */
